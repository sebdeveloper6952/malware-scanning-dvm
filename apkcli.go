package main

import (
	"context"
	"encoding/json"
	"github.com/cavaliergopher/grab/v3"
	"github.com/sebdeveloper6952/malware-dvm/helpers"
	"net/url"
	"os"
	"os/exec"
	"strings"

	goNostr "github.com/nbd-wtf/go-nostr"
	"github.com/sebdeveloper6952/godvm"
	"github.com/sirupsen/logrus"

	"github.com/sebdeveloper6952/malware-dvm/services"
)

type apkcliDVM struct {
	sk         string
	pk         string
	version    string
	name       string
	about      string
	picture    string
	gitService services.GitService
	log        *logrus.Logger
}

type apkcliResponse struct {
	Clean   bool
	Details string
	Cached  bool
}

type apkcliOutput struct {
	Permissions []string          `json:"permissions"`
	Certificate map[string]string `json:"certificate"`
}

func NewAPKCLIDVM(
	sk string,
	version string,
	name string,
	about string,
	picture string,
	gitService services.GitService,
	log *logrus.Logger,
) (godvm.Dvmer, error) {
	dvm := &apkcliDVM{
		version:    version,
		name:       name,
		about:      about,
		picture:    picture,
		gitService: gitService,
		log:        log,
	}

	return dvm, dvm.SetSk(sk)
}

func (d *apkcliDVM) SetSk(sk string) error {
	d.sk = sk
	pk, err := goNostr.GetPublicKey(d.sk)
	if err != nil {
		return err
	}
	d.pk = pk

	return nil
}

func (d *apkcliDVM) PublicKeyHex() string {
	return d.pk
}

func (d *apkcliDVM) Sign(e *goNostr.Event) error {
	return e.Sign(d.sk)
}

func (d *apkcliDVM) Profile() *godvm.ProfileMetadata {
	return &godvm.ProfileMetadata{
		Name:    d.name,
		About:   d.about,
		Picture: d.picture,
	}
}

func (d *apkcliDVM) KindSupported() int {
	return godvm.KindReqMalwareScan
}

func (d *apkcliDVM) Version() string {
	return d.version
}

func (d *apkcliDVM) acceptJob(input *godvm.Nip90Input) bool {
	if _, tagged := input.TaggedPubkeys[d.pk]; len(input.TaggedPubkeys) > 0 && !tagged {
		return false
	}

	if input.Inputs == nil || len(input.Inputs) != 1 {
		return false
	}

	if _, err := url.ParseRequestURI(input.Inputs[0].Value); err != nil {
		return false
	}

	if input.Inputs[0].Type != "url" {
		return false
	}

	return true
}

func (d *apkcliDVM) Run(
	ctx context.Context,
	nip90Input *godvm.Nip90Input,
	chanToDvm <-chan *godvm.JobUpdate,
	chanToEngine chan<- *godvm.JobUpdate,
) bool {
	if !d.acceptJob(nip90Input) {
		return false
	}

	go func() {
		defer func() {
			close(chanToEngine)
		}()

		input, err := MalwareScanningInputFromNip90Input(nip90Input)
		if err != nil {
			chanToEngine <- &godvm.JobUpdate{
				Status: godvm.StatusError,
			}

			return
		}

		chanToEngine <- &godvm.JobUpdate{
			Status: godvm.StatusProcessing,
		}

		res, err := d.run(ctx, input)
		if err != nil {
			// TODO: write failed update
			return
		}

		extraTags := make([][]string, 0)
		for i := range res.Permissions {
			extraTags = append(extraTags, []string{"pm", res.Permissions[i]})
		}
		for k, v := range res.Certificate {
			extraTags = append(extraTags, []string{"c", k, v})
		}

		chanToEngine <- &godvm.JobUpdate{
			Status:    godvm.StatusSuccess,
			Result:    "CLEAN",
			ExtraTags: extraTags,
		}
	}()

	return true
}

func (d *apkcliDVM) run(_ context.Context, input *MalwareScanningInput) (*apkcliOutput, error) {
	var (
		tmpDir   = "./tmp/"
		fileName string
		err      error
	)

	fileNameParts := strings.Split(input.URL, "/")
	fileName = helpers.RandomBase16String(16) + "_" + fileNameParts[len(fileNameParts)-1]
	_, err = grab.Get(
		tmpDir+fileName,
		input.URL,
	)
	if err != nil {
		return nil, err
	}

	defer func() {
		err := os.RemoveAll(tmpDir + fileName)
		if err != nil {
			d.log.Errorf("[apkcli] %+v", err)
			return
		}
		d.log.Tracef("[apkcli] removed file %s", fileName)
	}()

	cmd := exec.Command(
		"docker",
		"run",
		"-v",
		tmpDir+":/usr/src/app",
		"apkcli",
		"json",
		fileName,
	)

	output, err := cmd.CombinedOutput()
	if err != nil {
		return nil, err
	}

	o := string(output)
	start := strings.Index(o, "{")
	end := strings.LastIndex(o, "}")
	jsonPart := o[start : end+1]

	apkcli := &apkcliOutput{}
	if err := json.Unmarshal([]byte(jsonPart), apkcli); err != nil {
		return nil, err
	}

	return apkcli, nil
}
