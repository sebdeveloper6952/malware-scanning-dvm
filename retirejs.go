package main

import (
	"context"
	"fmt"
	"github.com/sebdeveloper6952/malware-dvm/helpers"
	"net/url"
	"os"
	"os/exec"
	"strings"

	"github.com/go-git/go-git/v5"
	goNostr "github.com/nbd-wtf/go-nostr"
	"github.com/sebdeveloper6952/godvm"
	"github.com/sirupsen/logrus"
)

type retirejsDVM struct {
	sk         string
	pk         string
	apiKey     string
	apiURL     string
	version    string
	name       string
	about      string
	picture    string
	npmPath    string
	retirePath string
	log        *logrus.Logger
}

func NewRetireJSDVM(
	sk string,
	version string,
	name string,
	about string,
	picture string,
	npmPath string,
	retirePath string,
	log *logrus.Logger,
) (godvm.Dvmer, error) {
	dvm := &retirejsDVM{
		version:    version,
		name:       name,
		about:      about,
		picture:    picture,
		npmPath:    npmPath,
		retirePath: retirePath,
		log:        log,
	}

	return dvm, dvm.SetSk(sk)
}

func (d *retirejsDVM) SetSk(sk string) error {
	d.sk = sk
	pk, err := goNostr.GetPublicKey(d.sk)
	if err != nil {
		return err
	}
	d.pk = pk

	return nil
}

func (d *retirejsDVM) PublicKeyHex() string {
	return d.pk
}

func (d *retirejsDVM) Sign(e *goNostr.Event) error {
	return e.Sign(d.sk)
}

func (d *retirejsDVM) Profile() *godvm.ProfileMetadata {
	return &godvm.ProfileMetadata{
		Name:    d.name,
		About:   d.about,
		Picture: d.picture,
	}
}

func (d *retirejsDVM) KindSupported() int {
	return godvm.KindReqMalwareScan
}

func (d *retirejsDVM) Version() string {
	return d.version
}

func (d *retirejsDVM) acceptJob(input *godvm.Nip90Input) bool {
	// if the job request tagged and DVM and it is not us, don't respond
	if _, tagged := input.TaggedPubkeys[d.pk]; len(input.TaggedPubkeys) > 0 && !tagged {
		return false
	}

	if input.Inputs == nil || len(input.Inputs) != 1 {
		return false
	}

	i := input.Inputs[0]

	if _, err := url.ParseRequestURI(i.Value); err != nil {
		return false
	}

	if i.Type != "url" {
		return false
	}

	return true
}

func (d *retirejsDVM) Run(
	ctx context.Context,
	input *godvm.Nip90Input,
	chanToDvm <-chan *godvm.JobUpdate,
	chanToEngine chan<- *godvm.JobUpdate,
) bool {
	if !d.acceptJob(input) {
		return false
	}

	go func() {
		chanToEngine <- &godvm.JobUpdate{
			Status: godvm.StatusProcessing,
		}

		path, err := d.cloneRepo(input.Inputs[0].Value)
		if err != nil {
			chanToEngine <- &godvm.JobUpdate{
				Status:     godvm.StatusError,
				FailureMsg: "could not find repo",
			}

			return
		}

		defer func() {
			if err := os.RemoveAll(path); err != nil {
				d.log.Errorf("[retirejs] couldn't delete directory %s %+v\n", path, err)
			}
		}()

		if output, err := d.npmInstall(path); err != nil {
			if err != nil {
				d.log.Errorf("%+v", fmt.Errorf("[retirejs][npm] %w %s", err, output))

				chanToEngine <- &godvm.JobUpdate{
					Status:     godvm.StatusError,
					FailureMsg: "failed running npm install",
				}

				return
			}
		}

		jobOutput := "CLEAN"
		output, err := d.retireJs(path)
		if err != nil {
			d.log.Errorf("%+v", fmt.Errorf("[retirejs][run] %w %s", err, output))
			jobOutput = output
		}

		chanToEngine <- &godvm.JobUpdate{
			Status:     godvm.StatusSuccessWithPayment,
			Result:     jobOutput,
			AmountSats: 1,
		}
	}()

	return true
}

func (d *retirejsDVM) cloneRepo(repoURL string) (string, error) {
	var (
		path   = "./tmp/" + helpers.RandomBase16String(16)
		output = &strings.Builder{}
	)

	_, err := git.PlainClone(path, false, &git.CloneOptions{
		URL:          repoURL,
		SingleBranch: true,
		Progress:     output,
	})

	return path, err
}

func (d *retirejsDVM) npmInstall(path string) (string, error) {
	var (
		cmd = exec.Command(
			d.npmPath,
			"install",
			"--legacy-peer-deps",
		)
	)

	cmd.Dir = path

	output, err := cmd.CombinedOutput()

	return string(output), err
}

func (d *retirejsDVM) retireJs(path string) (string, error) {
	cmd := exec.Command(
		"retire",
	)

	cmd.Dir = path

	output, err := cmd.CombinedOutput()

	return string(output), err
}
