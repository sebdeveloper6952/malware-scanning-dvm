package main

import (
	"context"
	"fmt"
	"log"
	"net/url"
	"os"
	"os/exec"
	"strings"

	"github.com/go-git/go-git/v5"
	goNostr "github.com/nbd-wtf/go-nostr"
	"github.com/sebdeveloper6952/go-dvm/domain"
	"github.com/sebdeveloper6952/go-dvm/nostr"
)

type retirejsDVM struct {
	sk      string
	pk      string
	apiKey  string
	apiURL  string
	version string
	name    string
	about   string
	picture string
	npmPath string
}

func NewRetireJSDVM(
	sk string,
	version string,
	name string,
	about string,
	picture string,
	npmPath string,
) (domain.Dvmer, error) {
	dvm := &retirejsDVM{
		version: version,
		name:    name,
		about:   about,
		picture: picture,
		npmPath: npmPath,
	}

	return dvm, dvm.SetSk(sk)
}

func (d *retirejsDVM) SetSk(sk string) error {
	d.sk = sk
	pk, err := goNostr.GetPublicKey(d.sk)
	if err != nil {
		return err
	}
	d.pk = pk

	return nil
}

func (d *retirejsDVM) Pk() string {
	return d.pk
}

func (d *retirejsDVM) Sign(e *goNostr.Event) error {
	return e.Sign(d.sk)
}

func (d *retirejsDVM) Profile() *nostr.ProfileMetadata {
	return &nostr.ProfileMetadata{
		Name:    d.name,
		About:   d.about,
		Picture: d.picture,
	}
}

func (d *retirejsDVM) KindSupported() int {
	return nostr.KindReqMalwareScan
}

func (d *retirejsDVM) Version() string {
	return d.version
}

func (d *retirejsDVM) AcceptJob(input *nostr.Nip90Input) bool {
	if input.Inputs == nil || len(input.Inputs) != 1 {
		return false
	}

	i := input.Inputs[0]

	if _, err := url.ParseRequestURI(i.Value); err != nil {
		return false
	}

	if i.Type != "url" {
		return false
	}

	return true
}

func (d *retirejsDVM) Run(ctx context.Context, input *nostr.Nip90Input) (chan *domain.JobUpdate, chan *domain.JobUpdate, chan error) {
	chanToDvm := make(chan *domain.JobUpdate)
	chanToEngine := make(chan *domain.JobUpdate)
	chanErr := make(chan error)

	go func() {
		defer func() {
			close(chanToDvm)
			close(chanToEngine)
			close(chanErr)
		}()

		chanToEngine <- &domain.JobUpdate{
			Status: domain.StatusProcessing,
		}

		path, err := d.cloneRepo(input.Inputs[0].Value)
		if err != nil {
			chanToEngine <- &domain.JobUpdate{
				Status:     domain.StatusError,
				FailureMsg: "could not find repo",
			}

			chanErr <- err

			return
		}

		defer func() {
			if err := os.RemoveAll(path); err != nil {
				log.Printf("couldn't delete directory %s %+v\n", path, err)
			}
		}()

		if output, err := d.npmInstall(path); err != nil {
			if err != nil {
				log.Printf("%+v", fmt.Errorf("%w %s", err, output))
				chanErr <- err
				return
			}
		}

		output, err := d.retireJs(path)
		jobOutput := "CLEAN"
		if err != nil {
			jobOutput = output
		}

		chanToEngine <- &domain.JobUpdate{
			Status:     domain.StatusSuccessWithPayment,
			Result:     jobOutput,
			AmountSats: 1,
		}
	}()

	return chanToDvm, chanToEngine, chanErr
}

func (d *retirejsDVM) cloneRepo(repoURL string) (string, error) {
	var (
		path   = "./tmp/" + randomBase16String(16)
		output = &strings.Builder{}
	)

	_, err := git.PlainClone(path, false, &git.CloneOptions{
		URL:          repoURL,
		SingleBranch: true,
		Progress:     output,
	})

	return path, err
}

func (d *retirejsDVM) npmInstall(path string) (string, error) {
	var (
		cmd = exec.Command(
			d.npmPath,
			"install",
			"--legacy-peer-deps",
		)
	)

	cmd.Dir = path

	output, err := cmd.CombinedOutput()

	return string(output), err
}

func (d *retirejsDVM) retireJs(path string) (string, error) {
	cmd := exec.Command(
		"retire",
	)

	cmd.Dir = path

	output, err := cmd.CombinedOutput()

	return string(output), err
}
