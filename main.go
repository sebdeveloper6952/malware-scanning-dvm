package main

import (
	"context"
	"database/sql"
	migrate "github.com/rubenv/sql-migrate"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/joho/godotenv"
	_ "github.com/mattn/go-sqlite3"
	"github.com/sebdeveloper6952/go-dvm/engine"
	"github.com/sebdeveloper6952/go-dvm/lightning/lnbits"
	"github.com/sirupsen/logrus"

	"github.com/sebdeveloper6952/malware-dvm/db"
)

func main() {
	logrus.SetLevel(logrus.TraceLevel)

	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	// db init and migrations
	dbi, err := sql.Open("sqlite3", "./data/dvm.db")
	if err != nil {
		log.Fatal(err)
	}
	migrations := &migrate.FileMigrationSource{
		Dir: "db/migrations",
	}
	_, err = migrate.Exec(dbi, "sqlite3", migrations, migrate.Up)
	if err != nil {
		log.Fatal(err)
	}
	queries := db.New(dbi)
	// end db init

	ctx, cancelCtx := context.WithCancel(context.Background())

	logger := logrus.New()
	logger.SetFormatter(&logrus.TextFormatter{
		DisableColors: false,
		FullTimestamp: true,
	})
	logger.SetLevel(logrus.TraceLevel)

	lnSvc, err := lnbits.New(
		os.Getenv("LNBITS_API_URL"),
		os.Getenv("LNBITS_KEY"),
	)
	if err != nil {
		log.Fatal(err)
	}

	clamavDvm, err := NewClamavDVM(
		os.Getenv("DVM_CLAMAV_SK"),
		os.Getenv("DVM_CLAMAV_VERSION"),
		os.Getenv("DVM_CLAMAV_NAME"),
		os.Getenv("DVM_CLAMAV_ABOUT"),
		os.Getenv("DVM_CLAMAV_IMG"),
		queries,
	)
	if err != nil {
		log.Fatal(err)
	}
	virusTotalDvm, err := NewVirusTotalDVM(
		os.Getenv("DVM_VIRUS_TOTAL_SK"),
		os.Getenv("DVM_VIRUS_TOTAL_VERSION"),
		os.Getenv("VIRUS_TOTAL_KEY"),
		os.Getenv("VIRUS_TOTAL_URL"),
		os.Getenv("DVM_VIRUS_TOTAL_NAME"),
		os.Getenv("DVM_VIRUS_TOTAL_ABOUT"),
		os.Getenv("DVM_VIRUS_TOTAL_IMG"),
	)
	if err != nil {
		log.Fatal(err)
	}
	retirejsDvm, err := NewRetireJSDVM(
		os.Getenv("DVM_RETIREJS_SK"),
		os.Getenv("DVM_RETIREJS_VERSION"),
		os.Getenv("DVM_RETIREJS_NAME"),
		os.Getenv("DVM_RETIREJS_ABOUT"),
		os.Getenv("DVM_RETIREJS_IMG"),
		os.Getenv("EXEC_NPM_PATH"),
	)
	if err != nil {
		log.Fatal(err)
	}

	e, err := engine.NewEngine()
	if err != nil {
		log.Fatal(err)
	}
	e.SetLnService(lnSvc)

	e.RegisterDVM(clamavDvm)
	e.RegisterDVM(virusTotalDvm)
	e.RegisterDVM(retirejsDvm)

	if err := e.Run(
		ctx,
		[]string{
			"wss://nostr-pub.wellorder.net",
			"wss://nos.lol",
			"wss://relay.damus.io",
		},
	); err != nil {
		log.Fatal(err)
	}

	log.Println("running...")

	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGTERM, syscall.SIGINT, syscall.SIGKILL)
	for {
		select {
		case sig := <-sigChan:
			if sig == os.Interrupt {
				cancelCtx()
				log.Println("bye")
				return
			}
		}
	}
}
