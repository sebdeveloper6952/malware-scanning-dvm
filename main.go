package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/joho/godotenv"
	_ "github.com/mattn/go-sqlite3"
	"github.com/sebdeveloper6952/godvm"
	"github.com/sebdeveloper6952/godvm/lightning/lnbits"
	"github.com/sirupsen/logrus"

	"github.com/sebdeveloper6952/malware-dvm/db"
	"github.com/sebdeveloper6952/malware-dvm/services"
)

func main() {
	ctx, cancelCtx := context.WithCancel(context.Background())

	logger := logrus.New()
	logger.SetFormatter(&logrus.TextFormatter{
		DisableColors: false,
		FullTimestamp: true,
	})
	logger.SetLevel(logrus.TraceLevel)

	err := godotenv.Load()
	if err != nil {
		logrus.Fatal("Error loading .env file")
	}

	dbQueries, err := db.NewDB(
		os.Getenv("DB_PATH"),
		"db/migrations",
	)
	if err != nil {
		logrus.Fatal(err)
	}

	gitService := services.NewGoGitService()
	hasherService := services.NewHasherService()

	lnSvc, err := lnbits.New(
		os.Getenv("LNBITS_API_URL"),
		os.Getenv("LNBITS_KEY"),
	)
	if err != nil {
		log.Fatal(err)
	}

	clamavDvm, err := NewClamavDVM(
		os.Getenv("DVM_CLAMAV_SK"),
		os.Getenv("DVM_CLAMAV_VERSION"),
		os.Getenv("DVM_CLAMAV_NAME"),
		os.Getenv("DVM_CLAMAV_ABOUT"),
		os.Getenv("DVM_CLAMAV_IMG"),
		dbQueries,
		gitService,
		logger,
		hasherService,
	)
	if err != nil {
		log.Fatal(err)
	}
	virusTotalDvm, err := NewVirusTotalDVM(
		os.Getenv("DVM_VIRUS_TOTAL_SK"),
		os.Getenv("DVM_VIRUS_TOTAL_VERSION"),
		os.Getenv("VIRUS_TOTAL_KEY"),
		os.Getenv("VIRUS_TOTAL_URL"),
		os.Getenv("DVM_VIRUS_TOTAL_NAME"),
		os.Getenv("DVM_VIRUS_TOTAL_ABOUT"),
		os.Getenv("DVM_VIRUS_TOTAL_IMG"),
		logger,
	)
	if err != nil {
		log.Fatal(err)
	}
	retirejsDvm, err := NewRetireJSDVM(
		os.Getenv("DVM_RETIREJS_SK"),
		os.Getenv("DVM_RETIREJS_VERSION"),
		os.Getenv("DVM_RETIREJS_NAME"),
		os.Getenv("DVM_RETIREJS_ABOUT"),
		os.Getenv("DVM_RETIREJS_IMG"),
		os.Getenv("EXEC_NPM_PATH"),
		os.Getenv("EXEC_RETIRE_PATH"),
		logger,
	)
	if err != nil {
		log.Fatal(err)
	}

	apkcliDvm, err := NewAPKCLIDVM(
		os.Getenv("DVM_APKCLI_SK"),
		os.Getenv("DVM_APKCLI_VERSION"),
		os.Getenv("DVM_APKCLI_NAME"),
		os.Getenv("DVM_APKCLI_ABOUT"),
		os.Getenv("DVM_APKCLI_IMG"),
		gitService,
		logger,
	)
	if err != nil {
		log.Fatal(err)
	}

	e, err := godvm.NewEngine()
	if err != nil {
		log.Fatal(err)
	}
	e.SetLnService(lnSvc)

	e.RegisterDVM(clamavDvm)
	e.RegisterDVM(virusTotalDvm)
	e.RegisterDVM(retirejsDvm)
	e.RegisterDVM(apkcliDvm)

	if err := e.Run(
		ctx,
		[]string{
			"ws://localhost:4871",
		},
	); err != nil {
		log.Fatal(err)
	}

	logger.Trace("running...")

	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGTERM)
	for sig := range sigChan {
		if sig == syscall.SIGTERM {
			cancelCtx()
			log.Println("bye")
			return
		}
	}
}
