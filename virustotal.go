package main

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	goNostr "github.com/nbd-wtf/go-nostr"
	"github.com/sebdeveloper6952/godvm"
	"github.com/sirupsen/logrus"
)

type virusTotalDVM struct {
	sk      string
	pk      string
	apiKey  string
	apiURL  string
	version string
	name    string
	about   string
	picture string
	log     *logrus.Logger
}

type link struct {
	Self string `json:"self"`
}

type scanUrlData struct {
	Id    string `json:"id"`
	Links link   `json:"links"`
}

type scanUrlResponse struct {
	Data scanUrlData `json:"data"`
}

type analysesStats struct {
	Harmless   int `json:"harmless"`
	Malicious  int `json:"malicious"`
	Suspicious int `json:"suspicious"`
	Undetected int `json:"undetected"`
	Timeout    int `json:"timeout"`
}

type engineScan struct {
	Category   string `json:"category"`
	Result     string `json:"result"`
	Method     string `json:"method"`
	EngineName string `json:"engine_name"`
}

type getAnalysesAttributes struct {
	Status  string                `json:"status"`
	Stats   analysesStats         `json:"stats"`
	Results map[string]engineScan `json:"results"`
}

type getAnalysesData struct {
	Attributes getAnalysesAttributes `json:"attributes"`
}

type getAnalysisResponse struct {
	Data getAnalysesData `json:"data"`
}

func NewVirusTotalDVM(
	sk string,
	version string,
	key string,
	url string,
	name string,
	about string,
	picture string,
	log *logrus.Logger,
) (godvm.Dvmer, error) {
	dvm := &virusTotalDVM{
		apiKey:  key,
		apiURL:  url,
		version: version,
		name:    name,
		about:   about,
		picture: picture,
		log:     log,
	}

	return dvm, dvm.SetSk(sk)
}

func (d *virusTotalDVM) SetSk(sk string) error {
	d.sk = sk
	pk, err := goNostr.GetPublicKey(d.sk)
	if err != nil {
		return err
	}
	d.pk = pk

	return nil
}

func (d *virusTotalDVM) PublicKeyHex() string {
	return d.pk
}

func (d *virusTotalDVM) Sign(e *goNostr.Event) error {
	return e.Sign(d.sk)
}

func (d *virusTotalDVM) Profile() *godvm.ProfileMetadata {
	return &godvm.ProfileMetadata{
		Name:    d.name,
		About:   d.about,
		Picture: d.picture,
	}
}

func (d *virusTotalDVM) KindSupported() int {
	return godvm.KindReqMalwareScan
}

func (d *virusTotalDVM) Version() string {
	return d.version
}

func (d *virusTotalDVM) acceptJob(input *godvm.Nip90Input) bool {
	// if the job request tagged and DVM and it is not us, don't respond
	if _, tagged := input.TaggedPubkeys[d.pk]; len(input.TaggedPubkeys) > 0 && !tagged {
		return false
	}

	if input.Inputs == nil || len(input.Inputs) != 1 {
		return false
	}

	i := input.Inputs[0]

	if _, err := url.ParseRequestURI(i.Value); err != nil {
		return false
	}

	if i.Type != "url" {
		return false
	}

	return true
}

func (d *virusTotalDVM) Run(
	ctx context.Context,
	input *godvm.Nip90Input,
	chanToDvm <-chan *godvm.JobUpdate,
	chanToEngine chan<- *godvm.JobUpdate,
) bool {
	if !d.acceptJob(input) {
		return false
	}

	go func() {
		chanToEngine <- &godvm.JobUpdate{
			Status: godvm.StatusProcessing,
		}

		scanUrlRes, err := d.scanURL(input.Inputs[0].Value)
		if err != nil {
			chanToEngine <- &godvm.JobUpdate{
				Status:     godvm.StatusError,
				FailureMsg: "couldn't scan provided URL",
			}

			return
		}

		for {
			select {
			case <-time.After(time.Second * 3):
				analysisRes, err := d.getAnalysisStatus(scanUrlRes.Data.Id)
				if err != nil {
					continue
				}

				if analysisRes.Data.Attributes.Status == "completed" {
					result := "CLEAN"

					if analysisRes.Data.Attributes.Stats.Malicious != 0 ||
						analysisRes.Data.Attributes.Stats.Suspicious != 0 {
						result = d.parseAnalysisStatus(analysisRes.Data.Attributes)
					}

					resultPayload := &MalwareScanningOutput{
						Result: result,
					}
					resultBytes, _ := json.Marshal(resultPayload)

					chanToEngine <- &godvm.JobUpdate{
						Status:     godvm.StatusSuccessWithPayment,
						Result:     string(resultBytes),
						AmountSats: 1,
					}

					return
				}
			case <-ctx.Done():
				return
			}
		}
	}()

	return true
}

func (d *virusTotalDVM) scanURL(urlToScan string) (*scanUrlResponse, error) {
	apiUrl := d.apiURL + "/urls"

	form := url.Values{}
	form.Add("url", urlToScan)

	request, err := http.NewRequest(http.MethodPost, apiUrl, strings.NewReader(form.Encode()))
	if err != nil {
		return nil, err
	}

	request.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	request.Header.Add("x-apikey", d.apiKey)

	res, err := http.DefaultClient.Do(request)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()

	if res.StatusCode != http.StatusOK {
		return nil, errors.New(res.Status)
	}

	response := &scanUrlResponse{}
	if err := json.NewDecoder(res.Body).Decode(response); err != nil {
		return nil, err
	}

	return response, nil
}

func (d *virusTotalDVM) getAnalysisStatus(analysisId string) (*getAnalysisResponse, error) {
	apiUrl := d.apiURL + "/analyses/" + analysisId

	request, err := http.NewRequest(http.MethodGet, apiUrl, http.NoBody)
	if err != nil {
		return nil, err
	}

	request.Header.Add("Content-Type", "application/json")
	request.Header.Add("x-apikey", d.apiKey)

	res, err := http.DefaultClient.Do(request)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()

	if res.StatusCode != http.StatusOK {
		return nil, errors.New(res.Status)
	}

	response := &getAnalysisResponse{}
	if err := json.NewDecoder(res.Body).Decode(response); err != nil {
		return nil, fmt.Errorf("nanoleaf: get 'on' state json unmarshal: %w", err)
	}

	return response, nil
}

func (d *virusTotalDVM) parseAnalysisStatus(attr getAnalysesAttributes) string {
	report := "---------- REPORT RESULT ----------\n"
	report += fmt.Sprintf("Malicious: %d\n", attr.Stats.Malicious)
	report += fmt.Sprintf("Suspicious: %d\n", attr.Stats.Suspicious)

	for engine, scanResult := range attr.Results {
		if scanResult.Result == "suspicious" || scanResult.Result == "malicious" {
			report += fmt.Sprintf("%s => %s\n", engine, scanResult.Result)
		}
	}

	return report
}
