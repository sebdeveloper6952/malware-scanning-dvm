package main

import (
	"bytes"
	"context"
	"net/url"
	"os"
	"os/exec"
	"strings"

	"github.com/cavaliergopher/grab/v3"
	goNostr "github.com/nbd-wtf/go-nostr"
	"github.com/sebdeveloper6952/go-dvm/domain"
	"github.com/sebdeveloper6952/go-dvm/nostr"
	"github.com/sirupsen/logrus"

	"github.com/sebdeveloper6952/malware-dvm/db"
)

type clamavDVM struct {
	sk      string
	pk      string
	version string
	name    string
	about   string
	picture string
	q       *db.Queries
}

type res struct {
	Result string
}

type libClamAvResponse struct {
	Clean   bool
	Details string
	Cached  bool
}

func NewClamavDVM(
	sk string,
	version string,
	name string,
	about string,
	picture string,
	q *db.Queries,
) (domain.Dvmer, error) {
	dvm := &clamavDVM{
		version: version,
		name:    name,
		about:   about,
		picture: picture,
		q:       q,
	}

	return dvm, dvm.SetSk(sk)
}

func (d *clamavDVM) SetSk(sk string) error {
	d.sk = sk
	pk, err := goNostr.GetPublicKey(d.sk)
	if err != nil {
		return err
	}
	d.pk = pk

	return nil
}

func (d *clamavDVM) Pk() string {
	return d.pk
}

func (d *clamavDVM) Sign(e *goNostr.Event) error {
	return e.Sign(d.sk)
}

func (d *clamavDVM) Profile() *nostr.ProfileMetadata {
	return &nostr.ProfileMetadata{
		Name:    d.name,
		About:   d.about,
		Picture: d.picture,
	}
}

func (d *clamavDVM) KindSupported() int {
	return nostr.KindReqMalwareScan
}

func (d *clamavDVM) Version() string {
	return d.version
}

func (d *clamavDVM) AcceptJob(input *nostr.Nip90Input) bool {
	// if the job request tagged and DVM and it is not us, don't respond
	if _, tagged := input.TaggedPubkeys[d.pk]; len(input.TaggedPubkeys) > 0 && !tagged {
		return false
	}

	if input.Inputs == nil || len(input.Inputs) != 1 {
		return false
	}

	i := input.Inputs[0]

	if _, err := url.ParseRequestURI(i.Value); err != nil {
		return false
	}

	if i.Type != "url" {
		return false
	}

	return true
}

func (d *clamavDVM) Run(ctx context.Context, nip90Input *nostr.Nip90Input) (chan *domain.JobUpdate, chan *domain.JobUpdate, chan error) {
	chanToDvm := make(chan *domain.JobUpdate)
	chanToEngine := make(chan *domain.JobUpdate)
	chanErr := make(chan error)

	go func() {
		defer func() {
			close(chanToDvm)
			close(chanToEngine)
			close(chanErr)
		}()

		input, err := nostr.MalwareScanningInputFromNip90Input(nip90Input)
		if err != nil {
			chanErr <- err
			return
		}

		chanToEngine <- &domain.JobUpdate{
			Status: domain.StatusProcessing,
		}

		res, err := d.run(ctx, input)
		if err != nil {
			chanErr <- err
			return
		}

		if res.Cached {
			chanToEngine <- &domain.JobUpdate{
				Status: domain.StatusSuccess,
				Result: res.Details,
			}

			return
		}

		chanToEngine <- &domain.JobUpdate{
			Status:     domain.StatusSuccessWithPayment,
			Result:     res.Details,
			AmountSats: 1,
		}

	}()

	return chanToDvm, chanToEngine, chanErr
}

func (d *clamavDVM) run(ctx context.Context, input *nostr.MalwareScanningInput) (*libClamAvResponse, error) {
	fileNameParts := strings.Split(input.URL, "/")
	fileName := "./tmp/" + randomBase16String(16) + "_" + fileNameParts[len(fileNameParts)-1]

	resp, err := grab.Get(
		fileName,
		input.URL,
	)
	if err != nil {
		return nil, err
	}

	defer func() {
		err := os.Remove(fileName)
		if err != nil {
			logrus.Errorf("[clamav] %+v", err)
			return
		}
		logrus.Tracef("[clamav] removed file %s", fileName)
	}()

	fileHash, err := hashFile(fileName)
	if err != nil {
		return nil, err
	}

	dbUrl, err := d.q.GetUrl(ctx, db.GetUrlParams{
		Hash: fileHash,
		Pk:   d.pk,
	})
	if err == nil {
		return &libClamAvResponse{
			Clean:   dbUrl.Result == "CLEAN",
			Details: dbUrl.Result,
			Cached:  true,
		}, nil
	}

	cmd := exec.Command(
		"clamscan",
		"-r",
		"-z",
		resp.Filename,
	)

	var buf bytes.Buffer
	cmd.Stdout = &buf

	err = cmd.Run()
	details := "CLEAN"
	if err != nil {
		details = ""
		lines := strings.Split(buf.String(), "\n")
		for i := 12; i > 0; i-- {
			details += lines[len(lines)-i] + "\n"
		}
	}

	defer func() {
		if _, err := d.q.InsertUrl(ctx, db.InsertUrlParams{
			Hash:   fileHash,
			Pk:     d.pk,
			Url:    input.URL,
			Result: details,
		}); err != nil {
			logrus.Errorf("[clamav] %+v", err)
		}
	}()

	return &libClamAvResponse{
		Clean:   err == nil,
		Details: details,
	}, nil
}
