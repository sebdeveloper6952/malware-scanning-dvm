package main

import (
	"bytes"
	"context"
	"github.com/sirupsen/logrus"
	"os"
	"os/exec"
	"strings"

	"github.com/cavaliergopher/grab/v3"
	goNostr "github.com/nbd-wtf/go-nostr"

	"github.com/sebdeveloper6952/go-dvm/domain"
	"github.com/sebdeveloper6952/go-dvm/nostr"
)

type malwareDVM struct {
	sk string
	pk string
}

type res struct {
	Result string
}

type libClamAvResponse struct {
	Clean   bool
	Details string
}

func NewMalwareDvm(sk string) (domain.Dvmer, error) {
	dvm := &malwareDVM{}

	return dvm, dvm.SetSk(sk)
}

func (d *malwareDVM) SetSk(sk string) error {
	d.sk = sk
	pk, err := goNostr.GetPublicKey(d.sk)
	if err != nil {
		return err
	}
	d.pk = pk

	return nil
}

func (d *malwareDVM) Pk() string {
	return d.pk
}

func (d *malwareDVM) Sign(e *goNostr.Event) error {
	return e.Sign(d.sk)
}

func (d *malwareDVM) Profile() *nostr.ProfileMetadata {
	return &nostr.ProfileMetadata{
		Name:    "Malware Scan DVM",
		About:   "(Beta) I analyze software with ClamAV",
		Picture: "https://iconape.com/wp-content/png_logo_vector/virus-2.png",
	}
}

func (d *malwareDVM) KindSupported() int {
	return nostr.KindReqMalwareScan
}

func (d *malwareDVM) AcceptJob(input *nostr.Nip90Input) bool {
	_, err := nostr.ImageGenerationInputFromNip90Input(input)
	if err != nil {
		return false
	}

	if input.InputType != nostr.InputTypeURL {
		return false
	}

	return true
}

func (d *malwareDVM) Run(ctx context.Context, nip90Input *nostr.Nip90Input) (chan *domain.JobUpdate, chan *domain.JobUpdate, chan error) {
	chanToDvm := make(chan *domain.JobUpdate)
	chanToEngine := make(chan *domain.JobUpdate)
	chanErr := make(chan error)

	go func() {
		defer func() {
			close(chanToDvm)
			close(chanToEngine)
			close(chanErr)
		}()

		input, err := nostr.MalwareScanningInputFromNip90Input(nip90Input)
		if err != nil {
			chanErr <- err
			return
		}

		chanToEngine <- &domain.JobUpdate{
			Status: domain.StatusProcessing,
		}

		res, err := d.run(ctx, input)
		if err != nil {
			chanErr <- err
			return
		}

		chanToEngine <- &domain.JobUpdate{
			Status: domain.StatusSuccess,
			Result: res.Details,
		}
	}()

	return chanToDvm, chanToEngine, chanErr
}

func (d *malwareDVM) run(_ context.Context, input *nostr.MalwareScanningInput) (*libClamAvResponse, error) {
	fileNameParts := strings.Split(input.URL, "/")
	fileName := "./tmp/" + randomBase16String(16) + "_" + fileNameParts[len(fileNameParts)-1]

	resp, err := grab.Get(
		fileName,
		input.URL,
	)
	if err != nil {
		return nil, err
	}

	defer func() {
		err := os.Remove(fileName)
		if err != nil {
			logrus.Errorf("[dvm] %+v", err)
			return
		}
		logrus.Tracef("[dvm] removed file %s", fileName)
	}()

	cmd := exec.Command(
		"clamscan",
		"-r",
		"-z",
		resp.Filename,
	)

	var buf bytes.Buffer
	cmd.Stdout = &buf

	err = cmd.Run()
	details := "CLEAN"
	if err != nil {
		details = ""
		lines := strings.Split(buf.String(), "\n")
		for i := 12; i > 0; i-- {
			details += lines[len(lines)-i] + "\n"
		}
	}

	return &libClamAvResponse{
		Clean:   err == nil,
		Details: details,
	}, nil
}
